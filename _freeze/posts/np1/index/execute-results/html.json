{
  "hash": "c429e58040de617a50681b03d7519274",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"넘파이 배열(1차원:벡터, 2차원:행렬, 3차원:텐서)\"\nauthor: \"Sol\"\ndate: \"2024-07-18\"\ncategories: [numpy]\n---\n\n# 1. 벡터: 1차원 넘파이 배열\n## 정의\n- 벡터 : 숫자들의 일렬로 구성된 데이터 구조\n- 넘파이 벡터: 1차원 넘파이 배열\n\n## 특징\n- 동일한 자료형 : 계산의 효율성을 높이기 위해\n- 고속 연산 : 반복문을 사용하지 않고도 빠른 연산 수행\n- 다양한 연산 지원: 벡터간의 덧셈, 뺄셈 등 수학적 연산 지원\n- 메모리의 효율성: 파이썬 리스트보다 메모리를 적게 사용함\n\n# 2. 행렬: 2차원 넘파이 배열\n## 1차원 넘파이 배열(넘파이 벡터) 2개 합쳐 2차원 넘파이 배열 만들기 np.vstack(np.array1,np.array2)\n\n::: {#bdfd5300 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nmatrix = np.vstack((\n    np.arange(1,5),\n    np.arange(12,16)\n))\nmatrix\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray([[ 1,  2,  3,  4],\n       [12, 13, 14, 15]])\n```\n:::\n:::\n\n\n## 0으로 이루어진 2차원 배열 만들기 : .zeros()\n\n::: {#44464bed .cell execution_count=2}\n``` {.python .cell-code}\nnp.zeros([5,4])\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n```\n:::\n:::\n\n\n## 1차원 배열을 2차원 배열로 바꾸기: .reshape((행,열),order=\"C 또는 F\")\n\n::: {#5f7a8ba3 .cell execution_count=3}\n``` {.python .cell-code}\nnp.arange(1,7).reshape((2,3))\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray([[1, 2, 3],\n       [4, 5, 6]])\n```\n:::\n:::\n\n\n### .reshape 특징(1) -1을 통해서 크기를 자동으로 결정할 수 있음\n\n::: {#4591ba63 .cell execution_count=4}\n``` {.python .cell-code}\nnp.arange(1,7).reshape((2,-1))\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray([[1, 2, 3],\n       [4, 5, 6]])\n```\n:::\n:::\n\n\n::: {#813b3bf4 .cell execution_count=5}\n``` {.python .cell-code}\nnp.arange(1,7).reshape((-1,3))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\narray([[1, 2, 3],\n       [4, 5, 6]])\n```\n:::\n:::\n\n\n### .reshape 특징(2) order=\"F\"인자로 값의 순서를 정할 수 있음\n1) order=\"C\" : 행우선, 기본값이라 입력 안하면 자동으로 적용됨\n2) order=\"F\" : 열우선\n\n::: {#37360865 .cell execution_count=6}\n``` {.python .cell-code}\nnp.arange(1,7).reshape((-1,3),order=\"F\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\narray([[1, 3, 5],\n       [2, 4, 6]])\n```\n:::\n:::\n\n\n## 2차원 배열의 인덱싱\n\n::: {#ea8c8569 .cell execution_count=7}\n``` {.python .cell-code}\nmat_a = np.arange(1,21).reshape((4,5),order=\"F\")\nmat_a\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\narray([[ 1,  5,  9, 13, 17],\n       [ 2,  6, 10, 14, 18],\n       [ 3,  7, 11, 15, 19],\n       [ 4,  8, 12, 16, 20]])\n```\n:::\n:::\n\n\n::: {#5e235339 .cell execution_count=8}\n``` {.python .cell-code}\nmat_a[0,0]\nmat_a[1,1]\nmat_a[2,3]\nmat_a[0:2,3]\nmat_a[1:3,1:4]\nmat_b = np.arange(1,101).reshape((20,-1))\nmat_b[1::2,:]\nmat_b[[1,4,6,14],]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\narray([[ 6,  7,  8,  9, 10],\n       [21, 22, 23, 24, 25],\n       [31, 32, 33, 34, 35],\n       [71, 72, 73, 74, 75]])\n```\n:::\n:::\n\n\n## 참, 거짓 값과 인덱싱을 을 이용해 2차원 배열의 값 추출\n\n::: {#b9cf666f .cell execution_count=9}\n``` {.python .cell-code}\nx = np.arange(1, 11).reshape((5, 2)) * 2\nx\nx[[True, True, False, False, True], 0]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\narray([ 2,  6, 18])\n```\n:::\n:::\n\n\n## 필터링: 인덱싱에 조건식을 적용해 필터링\nQ. 1 열의 값이 50보다 큰 행들만, 열은 모두 가져오기\n\n::: {#169b1df0 .cell execution_count=10}\n``` {.python .cell-code}\nmat_b[mat_b[:,1]>50,:] \n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\narray([[ 51,  52,  53,  54,  55],\n       [ 56,  57,  58,  59,  60],\n       [ 61,  62,  63,  64,  65],\n       [ 66,  67,  68,  69,  70],\n       [ 71,  72,  73,  74,  75],\n       [ 76,  77,  78,  79,  80],\n       [ 81,  82,  83,  84,  85],\n       [ 86,  87,  88,  89,  90],\n       [ 91,  92,  93,  94,  95],\n       [ 96,  97,  98,  99, 100]])\n```\n:::\n:::\n\n\n# 3. 텐서: 3차원 배열 이상\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}