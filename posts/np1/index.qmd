---
title: "넘파이 배열"
author: "Sol"
date: "2024-07-18"
categories: [numpy]
---
# 1. 정의
1. 0차원 배열: 스칼라, 단순한 하나의 숫자
2. 1차원 배열: 벡터, 숫자들이 일렬로 구성된 데이터 구조
3. 2차원 배열: 행렬
4. 3차원 이상: 텐서

# 2. 특징
- 동일한 자료형 : 계산의 효율성을 높이기 위해
- 고속 연산 : 반복문을 사용하지 않고도 빠른 연산 수행
- 다양한 연산 지원: 벡터간의 덧셈, 뺄셈 등 수학적 연산 지원
- 메모리의 효율성: 파이썬 리스트보다 메모리를 적게 사용함

# 3. 생성
## (1) .empty(): 쓰레기값이 들어간 빈 배열 
```{python}
import numpy as np
?np.empty
x = np.empty(3)
# e^-10은 10^-10이다. 0으로 봐도 무방할 정도로 0에 가까운 수
x[0] = 3
x[1] = 5
x[2] = 3
x

y = np.empty(3,dtype=int)
y[0] = 3
y[1] = 5
y[2] = 3
y

z = np.empty([3,3], dtype=int)
z
np.zeros(3) # 0으로 채워진 원소 3개짜리 1차원 배열
```
## (2) .zeros() : 0으로 채워진 배열
```{python}
np.zeros(3)
np.zeros([3,3])
np.zeros([2,2],dtype=int)
```
## (3) np.array() : 직접 값 입력
```{python}
np.array([1,2,3])
np.array([1,2,3],dtype=float)
```
## (4) np.arange() : 일정 간격으로 숫자 생성하며 배열 생성
```{python}
np.arange(10) # 0부터 9까지
np.arange(1,10,2,dtype=float) # 1부터 9까지 2씩 건너뛰며 생성
np.arange(0,2,0.5)
np.arange(0,2.1,0.5)
np.arange(0,-100,-1)
-np.arange(100)
```
## (5) np.linspace() : 균일 간격으로 배열 생성
```{python}
np.linspace(0,100,5) # 0부터 100까지 균일 간격으로 5개 반환
np.linspace(0,100,5,retstep=True) # 0부터 100까지 균일 간격 25도 함께 반환
np.linspace(0,100,5,retstep=True,dtype=int)
np.linspace(0,100,5,endpoint=False) # 100은 포함하지 않음
np.linspace(0,10) # 간격 기본값은 50이므로 1부터 10까지 균일간격으로 50개생성
```

## (6) np.random.randint() : 랜덤값으로 생성
```{python}
np.random.seed(4) # seed안의 값이 같으면 다른 사람과 같은 랜덤값을 얻을 수 있다
np.random.rand(5) # 0부터 1미만의 수 5개
np.random.rand(5,3) # 0부터 1미만의 수 5행 3열
np.random.randint(0,10,2) # 0부터 10미만의 수 2개
np.random.randint(2,5) # 2에서 5미만의 수 1개
np.random.randint(2,5,[2,2]) # 2에서 5미만의 수로 채워진 2행2열
```

# 4. 크기 확인하기: len() 길이, .shape 행열, .size 원소갯수
```{python}
a= np.array([[1, 2, 3], [4, 5, 6]])
len(a)
a.shape # 튜플로 (행,열) 반환
a.size
b= np.array([1])
b.shape
```

# 5. 벡터 연산
```{python}
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
a+b # 리스트는 두개가 합쳐짐 [1,2,3,4,5,6] 
a-b # 리스트는 에러남
a*b # 리스트는 에러남 
a/b # 리스트는 에러남
a//b # 리스트는 에러남 
a%b # 리스트는 에러남
a*2 # 리스트는 2번 반복 [1,2,3,1,2,3]
a/2 # 리스트는 에러남
a+2 # 리스트는 에러남
a//b
```

## 브로드캐스팅: 다른 차원의 배열들의 연산 가능
### (1) 다차원과 0차원(스칼라)의 연산: 스칼라가 다차원인 것처럼 계산
```{python}
a= np.array([1,2,3])
a*2
```
### (2) 다차원과 1차원의 연산: 행이 일치하거나 열이 일치하면 가능
```{python}
a=np.array([[1,2,3],[4,5,6]])
a
b=np.array([10,20,30])
b
a*b # b가 [[10,20,30],[10,20,30]]인것처럼 계산
c=np.array([[10],[20]])
c
a*c # c가 [[10,10,10],[20,20,20]]인것처럼 계산
```

### 같은 차원의 경우 길이가 다르면 에러남
```{python}
a = np.array([1, 2, 3, 4])
b = np.array([1, 2])
# a+b 에러남
a+np.tile(b,2)
```
### 배열 길이 맞추기 (1) np.resize() - 값을 앞에서부터 맞춰준다
```{python}
a = np.array([1, 2, 3, 4, 5, 6])
b = np.array([7, 8, 9, 10])
np.resize(b,len(a))
```
### 배열 길이 맞추기 (2) np.repeat() : 배열의 값을 반복
```{python}
np.repeat(5,3) # 5가 3번 반복됨
np.repeat([1,2,3],3) # 1이 3번, 2가 3번, 3이 3번 반복됨
np.repeat([1,2,3],[2,1,4]) # 1이 2번, 2가 1번, 3이 4번 반복됨
np.array([[1,2,3],[4,5,6]])
np.repeat([[1,2,3],[4,5,6]],3) # 1차원으로 바뀜
np.repeat([[1,2,3],[4,5,6]],3,axis=1) # 각 열이 3번 반복됨
np.repeat([[1,2,3],[4,5,6]],3,axis=0) # 각 행이 3번 반복됨
```

### 배열 길이 맞추기(3) np.tile() : 배열 자체를 반복
```{python}
np.tile(5,3) # 5가 3번 반복됨
np.tile([1,2,3],3) # [1,2,3]이 3번 반복됨
np.tile([1,2,3],[3,2]) # [1,2,3]이 2번 반복된게 3행 생성
```


# 6. 인덱스
```{python}
a=np.array([1,2,3,4,5,6,7,8])
a[0]
a[-1]
a[::2] # 2칸씩
np.delete(a,1) # 1번인덱스 빼고 가져와라
np.delete(a,[1,2,3]) # 1번,2번,3번 인덱스 빼고 가져와라
# np.delete(a,[0:3])는 에러남
a[[1,3]] # 1번,3번 인덱스만 가져와라
a>3 # True, False값이 반환됨
a[a>3] # 원소값이 3보다 큰 값만 가져와라
a[(a<2) | (a>4)] # 값이 2보다 작거나 4보다 큰 값만 가져와라
b = np.array([5, 10, 15, 20, 25, 30])
b[b>=10] = 10 # b의 값이 10보다 크거나 같은 값에 10을 대입해라
b
```
# 7. 조건을 만족하는 위치 탐색 np.where()
```{python}
a = np.array([5, 10, 15, 20, 25, 30])
np.where(a>15) # 값이 15보다 큰 배열의 인덱스 반환
```
# 8. 데이터가 정의 되지 않은 경우: np.nan (not a number)
1) np.nan은 float타입의 numpy에서 제공하는 상수이다.
2) 데이터 분석에서 결측값(missing value)을 나타낼 때 주로 사용한다.
3) 비교는 `==`연산자는 사용할 수 없고 np.isnan()을 사용해 확인한다.
```{python}
a = np.array([20, np.nan, 13, 24, 309])
a
a.mean() # nan
np.nanmean(a) # nan무시
np.isnan(a) # 각 값에 True, False 배열로 나타남
np.nan_to_num(a,nan=0) # nan이 있으면 0값으로 바꿔라
np.nan_to_num(a,nan=100) # nan이 있으면 0값으로 바꿔라
~np.isnan(a) # nan이 아니면 True, 맞으면 False
a[~np.isnan(a)] # nan이 아닌 값만 가져와라
```

# 9. 값이 없는 경우: None
```{python}
a = np.array([20, None, 13, 24, 309])
a
```
# 10. 벡터는 같은 타입끼리만 담긴다
```{python}
a= np.array([1,"2",3]) # 값을 모두 str 타입으로 바꿔줌
a[[1,2]] #1,2번 인덱스 값을 가져와라
```

# 11. 벡터 합치기
## (1) 하나로 합치기: np.concate()
```{python}
a=np.array([1,2])
b=np.array([4,5,6])
np.concatenate((a,b))
```

## (2) 열로 쌓기: np.column_stack() - 길이가 같아야 함
```{python}
a=np.array([1,2,3])
b=np.array([4,5,6])
np.column_stack((a,b)) # 첫번째 배열을 0열에, 두번째 배열을 1열에
```
## (3) 행으로 쌓기: np.vstack() - 길이가 같아야 함
```{python}
a=np.array([1,2,3])
b=np.array([4,5,6])
np.vstack((a,b)) # 첫번쨰 배열을 0행에, 두번쨰 배열을 0행에
```

# 12. 벡터 차원 바꾸기 : .reshape()
```{python}
np.arange(1,7).reshape((2,3))
```

## (1) -1을 통해서 크기를 자동으로 결정할 수 있음
```{python}
np.arange(1,7).reshape((2,-1))
```
```{python}
np.arange(1,7).reshape((-1,3))
```

## (2) order="F"인자로 값의 순서를 정할 수 있음
1) order="C" : 행우선, 기본값이라 입력 안하면 자동으로 적용됨
2) order="F" : 열우선
```{python}
np.arange(1,7).reshape((-1,3),order="F")
```

# 13. 다차원을 1차원으로: .flatten()
```{python}
a = np.array([[1, 2, 3], [4, 5, 6]])
a
a.flatten()
b=np.arange(1,101).reshape((5,5,4))
b.flatten()
```


# 14. 다차원 배열의 인덱싱
```{python}
mat_a = np.arange(1,21).reshape((4,5),order="F")
mat_a
```
```{python}
mat_a[0,0]
mat_a[1,1]
mat_a[2,3]
mat_a[0:2,3]
mat_a[1:3,1:4]
mat_b = np.arange(1,101).reshape((20,-1))
mat_b[1::2,:]
mat_b[[1,4,6,14],]
```

## 참, 거짓 값과 인덱싱을 을 이용해 2차원 배열의 값 추출
```{python}
x = np.arange(1, 11).reshape((5, 2)) * 2
x
x[[True, True, False, False, True], 0]
```

## 필터링: 인덱싱에 조건식을 적용해 필터링
Q. 1 열의 값이 50보다 큰 행들만, 열은 모두 가져오기
```{python}
mat_b[mat_b[:,1]>50,:] 
```

# 15. 넘파이 배열 메서드: .sum(), .mean(), .max(), .min(), cumsum(), cumprod(), .argmax(), .argmin(), .clip(), .tolist(), astype(), .copy()
```{python}
a = np.array([[1, 2, 3], [4, 5, 6]])
a
a.sum() # 모든 원소 합계
a.mean() # 모든 원소 평균
a.max() # 모든 원소 중 가장 큰 수
a.min() # 모든 원소 중 가장 작은 수
a.cumsum() # 모든 원소 누적합
a.cumprod() # 모든 원소 누적곱
a.argmax() # 모든 원소 중 가장 큰 수의 인덱스
a.argmin() # 모든 원소 중 가장 작은 수의 인덱스
a.clip(2,4) # 2보다 작으면 2로, 4보다 크면 4로 반환
type(a) # numpy.ndarray
type(a.tolist()) # 넘파이배열을 list로 타입 변경
b= np.array([1.1, 2.2, 3.3])
b
b.astype(int) # 원소의 타입 변경
```

## 행끼리, 열끼리 계산:  axis=1(행끼리), axis=0(열끼리)
```{python}
a = np.array([[1, 2, 3], [4, 5, 6]])
a
a.sum(axis=1) # 행별 합계
a.mean(axis=1) # 행별 평균
a.max(axis=1) # 행별 가장 큰 수
a.min(axis=1) # 행별 가장 작은 수
a.cumsum(axis=1) # 행별 누적합
a.cumprod(axis=1) # 행별 누적곱
b = np.array([[4,2,1],[3,6,5]])
b
b.argmax(axis=1) # 행별 모든 원소 중 가장 큰 수의 인덱스
b.argmin(axis=1) # 행별 모든 원소 중 가장 작은 수의 인덱스
b.argmax(axis=0) # 열별 모든 원소 중 가장 큰 수의 인덱스
b.argmin(axis=0) # 열별 모든 원소 중 가장 작은 수의 인덱스

```

# 16. 행,열 바꾸기: .transpose()
```{python}
a=np.array([[1,2,3],[4,5,6]])
a
a.transpose()
```
# 17. 행렬의 곱 : .dot()
```{python}
a=np.array([[1,2,3],[4,5,6]])
a
b=np.array([[7,8],[9,10],[11,12]])
b
a.dot(b)
```
# 18. 행렬의 원소의 곱 : *
```{python}
a=np.array([[1,2,3],[4,5,6]])
b=np.array([[7,8,9],[10,11,12]])
a*b
```

# 19. 깊은 복사: .copy() 값만 복사
```{python}
a = np.array([1,2,3,4,5])
a
b = a # a의 주소값을 복사
b
c = a.copy() # 값을 복사
c
a[0] = 100
a
b
c
```
# 20. 배열의 정렬 : .sort(), .argsort()
```{python}
a = np.array([3,5,2,4,1])
a
a.sort() # 원본을 수정
a
b = np.array([3,5,2,4,1])
b.argsort() # 정렬했을때의 인덱스를 반환(원본 수정X)
b
b[b.argsort()] # 정렬된 인덱스로 출력
```
# 우리가 보는 표는 행렬의 형태이기 때문에 인덱싱과 필터링 스킬이 중요!!

# 연습문제
## 1. 
```{python}
A = np.array([[3,5,7],[2,3,6]])
A
```
## 2. 
```{python}
B = np.array([[8,10,7,8],[2,4,5,5],[7,6,1,7],[2,6,8,6],[9,3,4,2]])
B
B[[1,3,4],:]
```
## 3.
```{python}
B[B[:,2]>3,:]
```
## 4.
```{python}
row_sums = np.sum(B, axis =1)
print("각 행별 합계:\n", row_sums)
B[row_sums>=20,:]
```
## 5. 
```{python}
B
B.mean(axis=0)
np.where(B.mean(axis=0)>5)[0]
```
## 6. 
```{python}
np.sum(B >=5)
np.sum(B>7, axis=1)
B[np.sum(B>7, axis=1)>0,:]

```

